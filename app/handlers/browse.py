from aiogram import types, Dispatcher, F
from aiogram.fsm.context import FSMContext
from app.database import db
from app.keyboards.inline import get_browse_keyboard, get_like_keyboard
from app.utils.texts import get_text

async def start_browse(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª–µ–π"""
    user_id = message.from_user.id
    user = db.get_user(user_id)
    
    if not user:
        await message.answer(get_text('user_not_found', 'ru'))
        return
    
    language = user.get('language', 'ru')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–æ–ª–Ω–µ–Ω –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å
    if not user.get('age') or not user.get('gender'):
        await message.answer(get_text('complete_profile_first', language))
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    next_profile = get_next_profile(user_id, user.get('gender'))
    
    if not next_profile:
        await message.answer(get_text('no_profiles_found', language))
        return
    
    await show_profile_card(message, next_profile, language)

async def show_profile_card(message: types.Message, profile: dict, language: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –ø—Ä–æ—Ñ–∏–ª—è"""
    profile_text = f"üë§ {profile.get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}\n"
    profile_text += f"üéÇ {profile.get('age', '–ù–µ —É–∫–∞–∑–∞–Ω')} –ª–µ—Ç\n"
    
    if profile.get('city'):
        profile_text += f"üèô {profile.get('city')}\n"
    
    if profile.get('bio'):
        profile_text += f"üí¨ {profile.get('bio')}\n"
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø—Ä–æ—Ñ–∏–ª—è
    # await message.answer_photo(photo=profile_photo, caption=profile_text, reply_markup=get_like_keyboard())
    
    await message.answer(
        profile_text,
        reply_markup=get_like_keyboard(profile['id'])
    )

async def like_profile(callback_query: types.CallbackQuery, state: FSMContext):
    """–õ–∞–π–∫–Ω—É—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"""
    user_id = callback_query.from_user.id
    target_user_id = int(callback_query.data.split(':')[1])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ª–∞–π–∫ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    add_like(user_id, target_user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∑–∞–∏–º–Ω–æ—Å—Ç—å
    if check_mutual_like(user_id, target_user_id):
        await callback_query.message.edit_text(get_text('match_found', 'ru'))
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–∑–∞–∏–º–Ω–æ–º –ª–∞–π–∫–µ
    else:
        await callback_query.message.edit_text(get_text('profile_liked', 'ru'))
    
    await callback_query.answer()

async def dislike_profile(callback_query: types.CallbackQuery, state: FSMContext):
    """–î–∏–∑–ª–∞–π–∫–Ω—É—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"""
    await callback_query.message.edit_text(get_text('profile_skipped', 'ru'))
    await callback_query.answer()

async def next_profile(callback_query: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å"""
    user_id = callback_query.from_user.id
    user = db.get_user(user_id)
    language = user.get('language', 'ru') if user else 'ru'
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
    next_profile = get_next_profile(user_id, user.get('gender'))
    
    if not next_profile:
        await callback_query.message.edit_text(get_text('no_more_profiles', language))
        return
    
    await show_profile_card(callback_query.message, next_profile, language)
    await callback_query.answer()

def get_next_profile(current_user_id: int, current_gender: str) -> dict:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
    # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    return {
        'id': 1,
        'first_name': '–ê–Ω–Ω–∞',
        'age': 25,
        'city': '–ú–æ—Å–∫–≤–∞',
        'bio': '–õ—é–±–ª—é –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –∏ —Ö–æ—Ä–æ—à–∏–µ –∫–Ω–∏–≥–∏'
    }

def add_like(from_user_id: int, to_user_id: int) -> bool:
    """–î–æ–±–∞–≤–∏—Ç—å –ª–∞–π–∫ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–∞–π–∫–∞
    # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True
    return True

def check_mutual_like(user1_id: int, user2_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∑–∞–∏–º–Ω–æ—Å—Ç—å –ª–∞–π–∫–æ–≤"""
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∑–∞–∏–º–Ω–æ—Å—Ç–∏
    # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False
    return False

def register_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    dp.message.register(start_browse, F.text == "üë• –°–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏")
    dp.callback_query.register(like_profile, F.data.startswith("like:"))
    dp.callback_query.register(dislike_profile, F.data.startswith("dislike:"))
    dp.callback_query.register(next_profile, F.data.startswith("next:")) 