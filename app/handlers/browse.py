from aiogram import types, Dispatcher, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import logging
from app.database import db
from app.keyboards.inline import get_browse_keyboard as get_browse_inline_keyboard, get_like_keyboard
from app.keyboards.reply import get_main_keyboard, get_browse_keyboard, get_profile_view_keyboard, get_gender_preference_keyboard
from app.utils.texts import get_text

class BrowseStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π"""
    waiting_for_gender_preference = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
    waiting_for_age_min = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞
    waiting_for_age_max = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞
    waiting_for_city = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞

async def start_browse(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª–µ–π"""
    user_id = message.from_user.id
    user = db.get_user(user_id)
    
    if not user:
        await message.answer(get_text('user_not_found', 'ru'))
        return
    
    language = user.get('language', 'ru')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–æ–ª–Ω–µ–Ω –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å
    if not user.get('age') or not user.get('gender'):
        await message.answer(get_text('complete_profile_first', language))
        return
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.clear()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–ø—Ü–∏—è–º–∏ –ø–æ–∏—Å–∫–∞
    await message.answer(
        get_text('browse_options', language) or "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏–∏ –ø–æ–∏—Å–∫–∞:",
        reply_markup=get_browse_keyboard(language)
    )

async def browse_profiles(message: types.Message, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª–µ–π —Å —Ç–µ–∫—É—â–∏–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏"""
    user_id = message.from_user.id
    user = db.get_user(user_id)
    
    if not user:
        await message.answer(get_text('user_not_found', 'ru'))
        return
    
    language = user.get('language', 'ru')
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ñ–∏–ª—å—Ç—Ä–∞—Ö –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    gender_preference = state_data.get('gender_preference', None)  # None = –≤—Å–µ
    age_min = state_data.get('age_min', 18)
    age_max = state_data.get('age_max', 100)
    city = state_data.get('city', None)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é
    await state.update_data({
        'gender_preference': gender_preference,
        'age_min': age_min,
        'age_max': age_max,
        'city': city
    })
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤
    profile = await get_next_profile(user_id, gender_preference, age_min, age_max, city)
    
    if not profile:
        await message.answer(
            get_text('no_profiles_found', language) or "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π.",
            reply_markup=get_browse_keyboard(language)
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(current_profile_id=profile['id'])
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    await show_profile_card(message, profile, language)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
    await message.answer(
        get_text('rate_profile', language) or "–û—Ü–µ–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å:",
        reply_markup=get_profile_view_keyboard(language)
    )

async def show_profile_card(message: types.Message, profile: dict, language: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –ø—Ä–æ—Ñ–∏–ª—è"""
    profile_text = f"üë§ {profile.get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}\n"
    profile_text += f"üéÇ {profile.get('age', '–ù–µ —É–∫–∞–∑–∞–Ω')} –ª–µ—Ç\n"
    
    if profile.get('city'):
        profile_text += f"üèô {profile.get('city')}\n"
    
    if profile.get('bio'):
        profile_text += f"üí¨ {profile.get('bio')}\n"
    
    # –ü–æ–ª—É—á–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø—Ä–æ—Ñ–∏–ª—è
    main_photo = db.get_user_main_photo(profile['id'])
    
    if main_photo:
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ —Å —Ç–µ–∫—Å—Ç–æ–º –ø—Ä–æ—Ñ–∏–ª—è
        await message.answer_photo(
            photo=main_photo['file_id'],
            caption=profile_text,
            reply_markup=get_like_keyboard(profile['id'])
        )
    else:
        # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        await message.answer(
            profile_text,
            reply_markup=get_like_keyboard(profile['id'])
        )

async def like_profile(callback_query: types.CallbackQuery, state: FSMContext):
    """–õ–∞–π–∫–Ω—É—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"""
    user_id = callback_query.from_user.id
    target_user_id = int(callback_query.data.split(':')[1])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ª–∞–π–∫ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    add_like(user_id, target_user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∑–∞–∏–º–Ω–æ—Å—Ç—å
    if check_mutual_like(user_id, target_user_id):
        await callback_query.message.edit_caption(
            caption=callback_query.message.caption + "\n\n" + get_text('match_found', 'ru')
        )
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–∑–∞–∏–º–Ω–æ–º –ª–∞–π–∫–µ
    else:
        await callback_query.message.edit_caption(
            caption=callback_query.message.caption + "\n\n" + get_text('profile_liked', 'ru')
        )
    
    await callback_query.answer()

async def dislike_profile(callback_query: types.CallbackQuery, state: FSMContext):
    """–î–∏–∑–ª–∞–π–∫–Ω—É—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"""
    await callback_query.message.edit_caption(
        caption=callback_query.message.caption + "\n\n" + get_text('profile_skipped', 'ru')
    )
    await callback_query.answer()

async def next_profile(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å"""
    user_id = message.from_user.id
    user = db.get_user(user_id)
    
    if not user:
        await message.answer(get_text('user_not_found', 'ru'))
        return
    
    language = user.get('language', 'ru')
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ñ–∏–ª—å—Ç—Ä–∞—Ö –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    gender_preference = data.get('gender_preference', None)
    age_min = data.get('age_min', 18)
    age_max = data.get('age_max', 100)
    city = data.get('city', None)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤
    profile = await get_next_profile(user_id, gender_preference, age_min, age_max, city)
    
    if not profile:
        await message.answer(
            get_text('no_profiles_found', language) or "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π.",
            reply_markup=get_browse_keyboard(language)
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(current_profile_id=profile['id'])
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    await show_profile_card(message, profile, language)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
    await message.answer(
        get_text('rate_profile', language) or "–û—Ü–µ–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å:",
        reply_markup=get_profile_view_keyboard(language)
    )

async def set_gender_preference_start(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –≤—ã–±–æ—Ä –ø–æ–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞"""
    user_id = message.from_user.id
    user = db.get_user(user_id)
    
    if not user:
        await message.answer(get_text('user_not_found', 'ru'))
        return
    
    language = user.get('language', 'ru')
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
    await state.set_state(BrowseStates.waiting_for_gender_preference)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
    await message.answer(
        get_text('choose_gender_preference', language) or "–ö–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏?",
        reply_markup=get_gender_preference_keyboard(language)
    )

async def set_gender_preference(message: types.Message, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–ª –¥–ª—è –ø–æ–∏—Å–∫–∞"""
    user_id = message.from_user.id
    user = db.get_user(user_id)
    
    if not user:
        await message.answer(get_text('user_not_found', 'ru'))
        return
    
    language = user.get('language', 'ru')
    text = message.text.lower()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª
    if '–ø–∞—Ä–Ω–µ–π' in text or 'men' in text:
        gender_preference = 'male'
    elif '–¥–µ–≤—É—à–µ–∫' in text or 'women' in text:
        gender_preference = 'female'
    elif '–≤—Å–µ—Ö' in text or 'everyone' in text:
        gender_preference = 'all'
    else:
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∏ –æ–¥–Ω–æ–º—É –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å —Å–Ω–æ–≤–∞
        await message.answer(
            get_text('invalid_gender_preference', language) or "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
            reply_markup=get_gender_preference_keyboard(language)
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(gender_preference=gender_preference)
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–ø—Ü–∏—è–º –ø–æ–∏—Å–∫–∞
    await message.answer(
        get_text('gender_preference_set', language) or f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–∏—Å–∫: {text}",
        reply_markup=get_browse_keyboard(language)
    )

async def back_to_browse(message: types.Message, state: FSMContext):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–ø—Ü–∏—è–º –ø–æ–∏—Å–∫–∞"""
    user_id = message.from_user.id
    user = db.get_user(user_id)
    
    if not user:
        await message.answer(get_text('user_not_found', 'ru'))
        return
    
    language = user.get('language', 'ru')
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–ø—Ü–∏—è–º –ø–æ–∏—Å–∫–∞
    await message.answer(
        get_text('browse_options', language) or "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏–∏ –ø–æ–∏—Å–∫–∞:",
        reply_markup=get_browse_keyboard(language)
    )

async def set_age_filter_start(message: types.Message, state: FSMContext): 
    user_id = message.from_user.id
    user = db.get_user(user_id)
    
    if not user:
        await message.answer(get_text('user_not_found', 'ru'))
        return
    
    language = user.get('language', 'ru')
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞
    await state.set_state(BrowseStates.waiting_for_age_min)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç
    await message.answer(
        get_text('enter_min_age', language) or "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 18):",
        reply_markup=types.ReplyKeyboardRemove()
    )

async def set_age_min(message: types.Message, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞"""
    user_id = message.from_user.id
    user = db.get_user(user_id)
    
    if not user:
        await message.answer(get_text('user_not_found', 'ru'))
        return
    
    language = user.get('language', 'ru')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
    try:
        age_min = int(message.text)
        if age_min < 18:
            await message.answer(
                get_text('age_too_low', language) or "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 18 –ª–µ—Ç."
            )
            return
    except ValueError:
        await message.answer(
            get_text('invalid_age', language) or "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ."
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(age_min=age_min)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞
    await state.set_state(BrowseStates.waiting_for_age_max)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç
    await message.answer(
        get_text('enter_max_age', language) or f"–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç {age_min}):"
    )

async def set_age_max(message: types.Message, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞"""
    user_id = message.from_user.id
    user = db.get_user(user_id)
    
    if not user:
        await message.answer(get_text('user_not_found', 'ru'))
        return
    
    language = user.get('language', 'ru')
    
    # –ü–æ–ª—É—á–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    age_min = data.get('age_min', 18)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
    try:
        age_max = int(message.text)
        if age_max < age_min:
            await message.answer(
                get_text('max_age_too_low', language) or f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ {age_min} –ª–µ—Ç."
            )
            return
    except ValueError:
        await message.answer(
            get_text('invalid_age', language) or "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ."
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(age_max=age_max)
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–ø—Ü–∏—è–º –ø–æ–∏—Å–∫–∞
    await message.answer(
        get_text('age_filter_set', language) or f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä: {age_min}-{age_max} –ª–µ—Ç",
        reply_markup=get_browse_keyboard(language)
    )

async def set_city_filter_start(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –≥–æ—Ä–æ–¥—É"""
    user_id = message.from_user.id
    user = db.get_user(user_id)
    
    if not user:
        await message.answer(get_text('user_not_found', 'ru'))
        return
    
    language = user.get('language', 'ru')
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞
    await state.set_state(BrowseStates.waiting_for_city)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–æ—Ä–æ–¥
    await message.answer(
        get_text('enter_city_filter', language) or "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=types.ReplyKeyboardRemove()
    )

async def set_city_filter(message: types.Message, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –ø–æ –≥–æ—Ä–æ–¥—É"""
    user_id = message.from_user.id
    user = db.get_user(user_id)
    
    if not user:
        await message.answer(get_text('user_not_found', 'ru'))
        return
    
    language = user.get('language', 'ru')
    city = message.text.strip()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(city=city)
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–ø—Ü–∏—è–º –ø–æ–∏—Å–∫–∞
    await message.answer(
        get_text('city_filter_set', language) or f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–∏–ª—å—Ç—Ä –ø–æ –≥–æ—Ä–æ–¥—É: {city}",
        reply_markup=get_browse_keyboard(language)
    )

async def get_next_profile(current_user_id: int, gender_preference: str = None, age_min: int = 18, age_max: int = 100, city: str = None) -> dict:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    users = db.get_users_for_browse(current_user_id, gender_preference, age_min, age_max, city, limit=1)
    return users[0] if users else None

def add_like(from_user_id: int, to_user_id: int) -> bool:
    """–î–æ–±–∞–≤–∏—Ç—å –ª–∞–π–∫ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users
    from_user = db.get_user(from_user_id)
    if not from_user:
        return False
    
    return db.add_like(from_user['id'], to_user_id)

def check_mutual_like(user1_id: int, user2_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∑–∞–∏–º–Ω–æ—Å—Ç—å –ª–∞–π–∫–æ–≤"""
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users
    user1 = db.get_user(user1_id)
    user2 = db.get_user(user2_id)
    
    if not user1 or not user2:
        return False
    
    return db.check_mutual_like(user1['id'], user2['id'])

async def like_profile_message(message: types.Message, state: FSMContext):
    """–õ–∞–π–∫–Ω—É—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    user_id = message.from_user.id
    user = db.get_user(user_id)
    
    if not user:
        await message.answer(get_text('user_not_found', 'ru'))
        return
    
    language = user.get('language', 'ru')
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ—Ñ–∏–ª–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    current_profile_id = data.get('current_profile_id')
    
    if not current_profile_id:
        await message.answer(get_text('no_profile_to_rate', language) or "–ù–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –æ—Ü–µ–Ω–∫–∏")
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ª–∞–π–∫ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    add_like(user_id, current_profile_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∑–∞–∏–º–Ω–æ—Å—Ç—å
    if check_mutual_like(user_id, current_profile_id):
        await message.answer(get_text('match_found', language))
    else:
        await message.answer(get_text('profile_liked', language))
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
    await next_profile(message, state)

async def dislike_profile_message(message: types.Message, state: FSMContext):
    """–î–∏–∑–ª–∞–π–∫–Ω—É—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    user_id = message.from_user.id
    user = db.get_user(user_id)
    
    if not user:
        await message.answer(get_text('user_not_found', 'ru'))
        return
    
    language = user.get('language', 'ru')
    
    await message.answer(get_text('profile_skipped', language))
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
    await next_profile(message, state)

async def back_to_main_menu(message: types.Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user_id = message.from_user.id
    user = db.get_user(user_id)
    
    if not user:
        await message.answer(get_text('user_not_found', 'ru'))
        return
    
    language = user.get('language', 'ru')
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.clear()
    
    await message.answer(
        get_text('main_menu', language),
        reply_markup=get_main_keyboard(language)
    )

def register_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    dp.message.register(start_browse, F.text.in_({"üë• –°–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏", "üë• Browse profiles"}))
    dp.message.register(browse_profiles, F.text.in_({"üîç –ò—Å–∫–∞—Ç—å", "üîç Search"}))
    
    # –§–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
    dp.message.register(set_gender_preference_start, F.text.in_({"üë´ –ö–æ–≥–æ –∏—Å–∫–∞—Ç—å", "üë´ Who to search"}))
    dp.message.register(set_age_filter_start, F.text.in_({"üéÇ –í–æ–∑—Ä–∞—Å—Ç", "üéÇ Age range"}))
    dp.message.register(set_city_filter_start, F.text.in_({"üèô –ì–æ—Ä–æ–¥", "üèô City"}))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    dp.message.register(set_gender_preference, BrowseStates.waiting_for_gender_preference)
    dp.message.register(set_age_min, BrowseStates.waiting_for_age_min)
    dp.message.register(set_age_max, BrowseStates.waiting_for_age_max)
    dp.message.register(set_city_filter, BrowseStates.waiting_for_city)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É"
    dp.message.register(back_to_browse, F.text.in_({"üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É", "üîô Back to search"}))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π
    dp.message.register(next_profile, F.text.in_({"‚è≠ –°–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å", "‚è≠ Next profile"}))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ª–∞–π–∫/–¥–∏–∑–ª–∞–π–∫ (—á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è)
    dp.message.register(like_profile_message, F.text.in_({"üëç –õ–∞–π–∫", "üëç Like"}))
    dp.message.register(dislike_profile_message, F.text.in_({"üëé –î–∏–∑–ª–∞–π–∫", "üëé Dislike"}))
    
    # Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dp.callback_query.register(like_profile, F.data.startswith("like:"))
    dp.callback_query.register(dislike_profile, F.data.startswith("dislike:"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–ù–∞–∑–∞–¥" –∏ "–ù–∞ –≥–ª–∞–≤–Ω—É—é"
    dp.message.register(back_to_main_menu, F.text == "üîô –ù–∞–∑–∞–¥")
    dp.message.register(back_to_main_menu, F.text == "üîô Back")
    dp.message.register(back_to_main_menu, F.text == "üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é")
    dp.message.register(back_to_main_menu, F.text == "üè† Main menu")