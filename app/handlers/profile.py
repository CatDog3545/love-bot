from aiogram import types, Dispatcher, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import logging
from app.database import db
from app.keyboards.reply import get_profile_keyboard, get_main_keyboard, get_edit_profile_keyboard, get_photo_manage_keyboard
from app.keyboards.inline import get_gender_keyboard
from app.utils.texts import get_text
from config import MAX_PHOTOS

def get_user_main_photo(user_id):
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–∞–≤–Ω—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return db.get_user_main_photo(user_id)
        
def get_user_photos(user_id):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return db.get_user_photos(user_id)

class ProfileStates(StatesGroup):
    waiting_for_age = State()
    waiting_for_gender = State()
    waiting_for_bio = State()
    waiting_for_city = State()
    waiting_for_photo = State()
    waiting_for_photo_action = State()

async def show_profile(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    user = db.get_user(user_id)
    
    if not user:
        await message.answer(get_text('user_not_found', 'ru'))
        return
    
    language = user.get('language', 'ru')
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
    profile_text = f"üë§ {get_text('profile', language)}\n\n"
    profile_text += f"üìù {get_text('name', language)}: {user.get('first_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    
    if user.get('age'):
        profile_text += f"üéÇ {get_text('age', language)}: {user['age']}\n"
    
    if user.get('gender'):
        profile_text += f"üë´ {get_text('gender', language)}: {get_text(user['gender'], language)}\n"
    
    if user.get('city'):
        profile_text += f"üèô {get_text('city', language)}: {user['city']}\n"
    
    if user.get('bio'):
        profile_text += f"üí¨ {get_text('bio', language)}: {user['bio']}\n"
    
    # –ü–æ–ª—É—á–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    main_photo = get_user_main_photo(user['id'])
    
    if main_photo:
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ —Å —Ç–µ–∫—Å—Ç–æ–º –ø—Ä–æ—Ñ–∏–ª—è
        await message.answer_photo(
            photo=main_photo['file_id'],
            caption=profile_text,
            reply_markup=get_profile_keyboard(language)
        )
    else:
        # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        await message.answer(
            profile_text,
            reply_markup=get_profile_keyboard(language)
        )

async def edit_profile(message: types.Message, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è"""
    user_id = message.from_user.id
    user = db.get_user(user_id)
    language = user.get('language', 'ru') if user else 'ru'
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤–º–µ—Å—Ç–æ inline
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.clear()
    
    await message.answer(
        get_text('edit_profile', language),
        reply_markup=get_edit_profile_keyboard(language)
    )

async def set_age_start(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    user_id = message.from_user.id
    user = db.get_user(user_id)
    language = user.get('language', 'ru') if user else 'ru'
    
    await state.set_state(ProfileStates.waiting_for_age)
    await message.answer(get_text('enter_age', language))

async def set_age(message: types.Message, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    try:
        age = int(message.text)
        if age < 18 or age > 100:
            await message.answer(get_text('invalid_age', 'ru'))
            return
        
        user_id = message.from_user.id
        db.update_user_profile(user_id, age=age)
        
        await state.clear()
        await message.answer(get_text('age_set', 'ru'))
        
    except ValueError:
        await message.answer(get_text('invalid_age_format', 'ru'))

async def set_gender_start(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–ª–∞"""
    user_id = message.from_user.id
    user = db.get_user(user_id)
    language = user.get('language', 'ru') if user else 'ru'
    
    await message.answer(
        get_text('select_gender', language),
        reply_markup=get_gender_keyboard(language)
    )

async def set_gender(callback_query: types.CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª–∞"""
    gender = callback_query.data.split(':')[1]
    user_id = callback_query.from_user.id
    
    db.update_user_profile(user_id, gender=gender)
    
    await callback_query.message.edit_text(get_text('gender_set', 'ru'))
    await callback_query.answer()

async def set_bio_start(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–∏–æ"""
    user_id = message.from_user.id
    user = db.get_user(user_id)
    language = user.get('language', 'ru') if user else 'ru'
    
    await state.set_state(ProfileStates.waiting_for_bio)
    await message.answer(get_text('enter_bio', language))

async def set_bio(message: types.Message, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∏–æ"""
    bio = message.text[:500]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    user_id = message.from_user.id
    
    db.update_user_profile(user_id, bio=bio)
    
    await state.clear()
    await message.answer(get_text('bio_set', 'ru'))

async def set_city_start(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–æ—Ä–æ–¥–∞"""
    user_id = message.from_user.id
    user = db.get_user(user_id)
    language = user.get('language', 'ru') if user else 'ru'
    
    await state.set_state(ProfileStates.waiting_for_city)
    await message.answer(get_text('enter_city', language))

async def set_city(message: types.Message, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–æ—Ä–æ–¥–∞"""
    city = message.text
    user_id = message.from_user.id
    
    db.update_user_profile(user_id, city=city)
    
    await state.clear()
    await message.answer(get_text('city_set', 'ru'))



async def back_to_edit_profile(callback_query: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –ø—Ä–æ—Ñ–∏–ª—è —á–µ—Ä–µ–∑ callback"""
    user_id = callback_query.from_user.id
    user = db.get_user(user_id)
    
    if not user:
        await callback_query.message.answer(get_text('user_not_found', 'ru'))
        await callback_query.answer()
        return
    
    language = user.get('language', 'ru')
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.clear()
    
    await callback_query.message.answer(
        get_text('edit_profile', language),
        reply_markup=get_edit_profile_keyboard(language)
    )
    await callback_query.answer()

async def back_to_edit_profile_message(message: types.Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –ø—Ä–æ—Ñ–∏–ª—è —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    user_id = message.from_user.id
    user = db.get_user(user_id)
    
    if not user:
        await message.answer(get_text('user_not_found', 'ru'))
        return
    
    language = user.get('language', 'ru')
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.clear()
    
    # –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    await message.answer(
        get_text('edit_profile', language),
        reply_markup=get_edit_profile_keyboard(language)
    )

async def manage_photos(message: types.Message, state: FSMContext):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    user = db.get_user(user_id)
    
    if not user:
        await message.answer(get_text('user_not_found', 'ru'))
        return
    
    language = user.get('language', 'ru')
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    photos = get_user_photos(user['id'])
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤–º–µ—Å—Ç–æ inline
    
    await message.answer(
        get_text('manage_photos', language).format(count=len(photos), max_photos=MAX_PHOTOS),
        reply_markup=get_photo_manage_keyboard(language)
    )

async def add_photo_start(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
    user_id = message.from_user.id
    user = db.get_user(user_id)
    
    if not user:
        await message.answer(get_text('user_not_found', 'ru'))
        return
    
    language = user.get('language', 'ru')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    photo_count = db.get_photos_count(user['id'])
    
    if photo_count >= MAX_PHOTOS:
        await message.answer(get_text('max_photos_reached', language).format(max_photos=MAX_PHOTOS))
        return
    
    await state.set_state(ProfileStates.waiting_for_photo)
    await message.answer(get_text('send_photo', language))

async def add_photo_start_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —á–µ—Ä–µ–∑ callback"""
    user_id = callback_query.from_user.id
    user = db.get_user(user_id)
    
    if not user:
        await callback_query.message.answer(get_text('user_not_found', 'ru'))
        await callback_query.answer()
        return
    
    language = user.get('language', 'ru')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    photo_count = db.get_photos_count(user['id'])
    
    if photo_count >= MAX_PHOTOS:
        await callback_query.message.answer(get_text('max_photos_reached', language).format(max_photos=MAX_PHOTOS))
        await callback_query.answer()
        return
    
    await state.set_state(ProfileStates.waiting_for_photo)
    await callback_query.message.answer(get_text('send_photo', language))
    await callback_query.answer()

async def add_photo(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
    if not message.photo:
        user = db.get_user(message.from_user.id)
        language = user.get('language', 'ru') if user else 'ru'
        await message.answer(get_text('not_a_photo', language))
        return
    
    user_id = message.from_user.id
    user = db.get_user(user_id)
    
    if not user:
        await message.answer(get_text('user_not_found', 'ru'))
        await state.clear()
        return
    
    language = user.get('language', 'ru')
    
    # –ü–æ–ª—É—á–∞–µ–º file_id —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (–±–µ—Ä–µ–º —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä)
    file_id = message.photo[-1].file_id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    photo_count = db.get_photos_count(user['id'])
    
    # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è, –¥–µ–ª–∞–µ–º –µ–µ –≥–ª–∞–≤–Ω–æ–π
    is_main = photo_count == 0
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if db.add_photo(user['id'], file_id, is_main=is_main):
        await message.answer(get_text('photo_added', language))
        await state.clear()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        await show_profile(message, state)
    else:
        await message.answer(get_text('error', language))
        await state.clear()

async def view_photos(message: types.Message, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    user = db.get_user(user_id)
    
    if not user:
        await message.answer(get_text('user_not_found', 'ru'))
        return
    
    language = user.get('language', 'ru')
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    photos = get_user_photos(user['id'])
    
    if not photos:
        await message.answer(get_text('no_photos', language))
        return
        
    await _view_photos_common(message, photos, language)

async def view_photos_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ callback"""
    user_id = callback_query.from_user.id
    user = db.get_user(user_id)
    
    if not user:
        await callback_query.message.answer(get_text('user_not_found', 'ru'))
        await callback_query.answer()
        return
    
    language = user.get('language', 'ru')
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    photos = get_user_photos(user['id'])
    
    if not photos:
        await callback_query.message.answer(get_text('no_photos', language))
        await callback_query.answer()
        return
        
    await _view_photos_common(callback_query.message, photos, language)
    await callback_query.answer()
    
async def _view_photos_common(message, photos, language):
    """–û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not photos:
        await message.answer(get_text('no_photos', language))
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
    
    for i, photo in enumerate(photos):
        # –î–ª—è –∫–∞–∂–¥–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=get_text('set_as_main', language) if photo['is_main'] == 0 else get_text('main_photo', language),
                    callback_data=f"photo:main:{photo['id']}" if photo['is_main'] == 0 else "photo:info"
                ),
                InlineKeyboardButton(
                    text=get_text('delete_photo', language),
                    callback_data=f"photo:delete:{photo['id']}"
                )
            ]
        ])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        photo_caption = f"{get_text('photo', language)} {i+1}/{len(photos)}"
        if photo['is_main'] == 1:
            photo_caption += f" ({get_text('main_photo', language)})"
            
        await message.answer_photo(
            photo=photo['file_id'],
            caption=photo_caption,
            reply_markup=keyboard
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=get_text('back', language), callback_data="back:photos")
        ]
    ])
    
    await message.answer(
        get_text('photos_end', language),
        reply_markup=back_keyboard
    )

async def set_main_photo(callback_query: types.CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
    user_id = callback_query.from_user.id
    user = db.get_user(user_id)
    
    if not user:
        await callback_query.message.answer(get_text('user_not_found', 'ru'))
        await callback_query.answer()
        return
    
    language = user.get('language', 'ru')
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ callback_data
    photo_id = int(callback_query.data.split(':')[2])
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∫–∞–∫ –≥–ª–∞–≤–Ω—É—é
    if db.set_main_photo(photo_id, user['id']):
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π
        await callback_query.message.edit_caption(
            caption=f"{callback_query.message.caption.split('(')[0]} ({get_text('main_photo', language)})",
            reply_markup=callback_query.message.reply_markup
        )
        
        await callback_query.answer(get_text('main_photo_set', language))
    else:
        await callback_query.message.answer(get_text('error', language))
        await callback_query.answer()

async def delete_photo(callback_query: types.CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
    user_id = callback_query.from_user.id
    user = db.get_user(user_id)
    
    if not user:
        await callback_query.message.answer(get_text('user_not_found', 'ru'))
        await callback_query.answer()
        return
    
    language = user.get('language', 'ru')
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ callback_data
    photo_id = int(callback_query.data.split(':')[2])
    
    # –£–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
    if db.delete_photo(photo_id, user['id']):
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π
        await callback_query.message.delete()
        
        await callback_query.answer(get_text('photo_deleted', language))
    else:
        await callback_query.answer(get_text('photo_not_found', language))

async def back_to_main_menu(message: types.Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user_id = message.from_user.id
    user = db.get_user(user_id)
    
    if not user:
        await message.answer(get_text('user_not_found', 'ru'))
        return
    
    language = user.get('language', 'ru')
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.clear()
    
    await message.answer(
        get_text('main_menu', language),
        reply_markup=get_main_keyboard(language)
    )

def register_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    # –†—É—Å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    dp.message.register(show_profile, F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
    dp.message.register(edit_profile, F.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
    dp.message.register(set_age_start, F.text == "üéÇ –í–æ–∑—Ä–∞—Å—Ç")
    dp.message.register(set_gender_start, F.text == "üë´ –ü–æ–ª")
    dp.message.register(set_bio_start, F.text == "üí¨ –û —Å–µ–±–µ")
    dp.message.register(set_city_start, F.text == "üèô –ì–æ—Ä–æ–¥")
    dp.message.register(manage_photos, F.text == "üì∑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ")
    
    # –ê–Ω–≥–ª–∏–π—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    dp.message.register(show_profile, F.text == "üë§ Profile")
    dp.message.register(edit_profile, F.text == "‚úèÔ∏è Edit")
    dp.message.register(set_age_start, F.text == "üéÇ Age")
    dp.message.register(set_gender_start, F.text == "üë´ Gender")
    dp.message.register(set_bio_start, F.text == "üí¨ About me")
    dp.message.register(set_city_start, F.text == "üèô City")
    dp.message.register(manage_photos, F.text == "üì∑ Manage photos")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    dp.message.register(set_age, ProfileStates.waiting_for_age)
    dp.message.register(set_bio, ProfileStates.waiting_for_bio)
    dp.message.register(set_city, ProfileStates.waiting_for_city)
    dp.message.register(add_photo, ProfileStates.waiting_for_photo)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
    dp.message.register(add_photo_start, F.text == "üì∑ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ")
    dp.message.register(add_photo_start, F.text == "üì∑ Add photo")
    dp.message.register(view_photos, F.text == "üñº –ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–æ—Ç–æ")
    dp.message.register(view_photos, F.text == "üñº View photos")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–ù–∞ –≥–ª–∞–≤–Ω—É—é"
    dp.message.register(back_to_main_menu, F.text == "üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é")
    dp.message.register(back_to_main_menu, F.text == "üè† Main menu")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–ù–∞–∑–∞–¥" –∏ "–ö –ø—Ä–æ—Ñ–∏–ª—é"
    dp.message.register(back_to_edit_profile_message, F.text.in_({"üîô –ù–∞–∑–∞–¥", "üîô Back", "‚Ü©Ô∏è –ö –ø—Ä–æ—Ñ–∏–ª—é", "‚Ü©Ô∏è To profile"}))
    
    # Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dp.callback_query.register(set_gender, F.data.startswith("gender:"))
    dp.callback_query.register(add_photo_start_callback, F.data == "photo:add")
    dp.callback_query.register(view_photos_callback, F.data == "photo:view")
    dp.callback_query.register(set_main_photo, F.data.startswith("photo:main:"))
    dp.callback_query.register(delete_photo, F.data.startswith("photo:delete:"))
    dp.callback_query.register(back_to_edit_profile, F.data == "back:edit")
    dp.callback_query.register(back_to_edit_profile, F.data == "back:photos")